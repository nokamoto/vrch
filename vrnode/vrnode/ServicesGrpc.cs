// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: vrch/services.proto
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Vrch {
  public static partial class VrClusterService
  {
    static readonly string __ServiceName = "vrch.VrClusterService";

    static readonly grpc::Marshaller<global::Vrch.Incoming> __Marshaller_Incoming = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vrch.Incoming.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vrch.Outgoing> __Marshaller_Outgoing = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vrch.Outgoing.Parser.ParseFrom);

    static readonly grpc::Method<global::Vrch.Incoming, global::Vrch.Outgoing> __Method_Join = new grpc::Method<global::Vrch.Incoming, global::Vrch.Outgoing>(
        grpc::MethodType.DuplexStreaming,
        __ServiceName,
        "Join",
        __Marshaller_Incoming,
        __Marshaller_Outgoing);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Vrch.ServicesReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of VrClusterService</summary>
    public abstract partial class VrClusterServiceBase
    {
      public virtual global::System.Threading.Tasks.Task Join(grpc::IAsyncStreamReader<global::Vrch.Incoming> requestStream, grpc::IServerStreamWriter<global::Vrch.Outgoing> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VrClusterService</summary>
    public partial class VrClusterServiceClient : grpc::ClientBase<VrClusterServiceClient>
    {
      /// <summary>Creates a new client for VrClusterService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VrClusterServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VrClusterService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VrClusterServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VrClusterServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VrClusterServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual grpc::AsyncDuplexStreamingCall<global::Vrch.Incoming, global::Vrch.Outgoing> Join(grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Join(new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncDuplexStreamingCall<global::Vrch.Incoming, global::Vrch.Outgoing> Join(grpc::CallOptions options)
      {
        return CallInvoker.AsyncDuplexStreamingCall(__Method_Join, null, options);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VrClusterServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VrClusterServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VrClusterServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Join, serviceImpl.Join).Build();
    }

  }
  public static partial class VrchService
  {
    static readonly string __ServiceName = "vrch.VrchService";

    static readonly grpc::Marshaller<global::Vrch.Request> __Marshaller_Request = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vrch.Request.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vrch.Response> __Marshaller_Response = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vrch.Response.Parser.ParseFrom);

    static readonly grpc::Method<global::Vrch.Request, global::Vrch.Response> __Method_Talk = new grpc::Method<global::Vrch.Request, global::Vrch.Response>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Talk",
        __Marshaller_Request,
        __Marshaller_Response);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Vrch.ServicesReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of VrchService</summary>
    public abstract partial class VrchServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Vrch.Response> Talk(global::Vrch.Request request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VrchService</summary>
    public partial class VrchServiceClient : grpc::ClientBase<VrchServiceClient>
    {
      /// <summary>Creates a new client for VrchService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VrchServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VrchService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VrchServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VrchServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VrchServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Vrch.Response Talk(global::Vrch.Request request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Talk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vrch.Response Talk(global::Vrch.Request request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Talk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vrch.Response> TalkAsync(global::Vrch.Request request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TalkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vrch.Response> TalkAsync(global::Vrch.Request request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Talk, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VrchServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VrchServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VrchServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Talk, serviceImpl.Talk).Build();
    }

  }
  public static partial class VrService
  {
    static readonly string __ServiceName = "vrch.VrService";

    static readonly grpc::Marshaller<global::Vrch.Text> __Marshaller_Text = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vrch.Text.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Vrch.Voice> __Marshaller_Voice = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vrch.Voice.Parser.ParseFrom);

    static readonly grpc::Method<global::Vrch.Text, global::Vrch.Voice> __Method_Talk = new grpc::Method<global::Vrch.Text, global::Vrch.Voice>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Talk",
        __Marshaller_Text,
        __Marshaller_Voice);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Vrch.ServicesReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of VrService</summary>
    public abstract partial class VrServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Vrch.Voice> Talk(global::Vrch.Text request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for VrService</summary>
    public partial class VrServiceClient : grpc::ClientBase<VrServiceClient>
    {
      /// <summary>Creates a new client for VrService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public VrServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for VrService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public VrServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected VrServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected VrServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Vrch.Voice Talk(global::Vrch.Text request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Talk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vrch.Voice Talk(global::Vrch.Text request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Talk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vrch.Voice> TalkAsync(global::Vrch.Text request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TalkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vrch.Voice> TalkAsync(global::Vrch.Text request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Talk, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override VrServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new VrServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(VrServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Talk, serviceImpl.Talk).Build();
    }

  }
  public static partial class ChService
  {
    static readonly string __ServiceName = "vrch.ChService";

    static readonly grpc::Marshaller<global::Vrch.Dialogue> __Marshaller_Dialogue = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Vrch.Dialogue.Parser.ParseFrom);

    static readonly grpc::Method<global::Vrch.Dialogue, global::Vrch.Dialogue> __Method_Talk = new grpc::Method<global::Vrch.Dialogue, global::Vrch.Dialogue>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Talk",
        __Marshaller_Dialogue,
        __Marshaller_Dialogue);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Vrch.ServicesReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of ChService</summary>
    public abstract partial class ChServiceBase
    {
      public virtual global::System.Threading.Tasks.Task<global::Vrch.Dialogue> Talk(global::Vrch.Dialogue request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for ChService</summary>
    public partial class ChServiceClient : grpc::ClientBase<ChServiceClient>
    {
      /// <summary>Creates a new client for ChService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public ChServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for ChService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public ChServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected ChServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected ChServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Vrch.Dialogue Talk(global::Vrch.Dialogue request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return Talk(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Vrch.Dialogue Talk(global::Vrch.Dialogue request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Talk, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Vrch.Dialogue> TalkAsync(global::Vrch.Dialogue request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return TalkAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Vrch.Dialogue> TalkAsync(global::Vrch.Dialogue request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Talk, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override ChServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new ChServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(ChServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Talk, serviceImpl.Talk).Build();
    }

  }
}
#endregion
